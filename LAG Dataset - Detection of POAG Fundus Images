{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5891475,"sourceType":"datasetVersion","datasetId":3384831}],"dockerImageVersionId":30498,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import zipfile\nimport random\nimport tensorflow as tf\nfrom tensorflow import keras\nimport h5py\nimport os\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization\nfrom keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nimport scipy\nimport matplotlib.cm as cm\n%matplotlib inline\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport glob\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nimport imageio","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-06-10T13:14:07.659302Z","iopub.execute_input":"2023-06-10T13:14:07.659938Z","iopub.status.idle":"2023-06-10T13:14:07.670609Z","shell.execute_reply.started":"2023-06-10T13:14:07.659907Z","shell.execute_reply":"2023-06-10T13:14:07.669248Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Setting the paths to train dataset folders\n\n#train_folder = '/kaggle/input/acrima-dataset/train'\nglaucoma_folder = os.path.join('/kaggle/input/lag-dataset/LAG/train/glaucoma/image')\nnon_glaucoma_folder = os.path.join('/kaggle/input/lag-dataset/LAG/train/non_glaucoma/image')","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:12.349694Z","iopub.execute_input":"2023-06-10T13:14:12.350047Z","iopub.status.idle":"2023-06-10T13:14:12.354586Z","shell.execute_reply.started":"2023-06-10T13:14:12.350018Z","shell.execute_reply":"2023-06-10T13:14:12.353711Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Loading the glaucoma images\n\nglaucoma_images = []\nfor image_file in os.listdir(glaucoma_folder):\n    image_path = os.path.join(glaucoma_folder, image_file)\n    image = cv2.imread(image_path)\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB format\n    resized_image = cv2.resize(image_rgb, (224, 224))\n    glaucoma_images.append(resized_image)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:12.372773Z","iopub.execute_input":"2023-06-10T13:14:12.373600Z","iopub.status.idle":"2023-06-10T13:14:22.699354Z","shell.execute_reply.started":"2023-06-10T13:14:12.373566Z","shell.execute_reply":"2023-06-10T13:14:22.698324Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load the non-glaucoma images\n\nnon_glaucoma_images = []\nfor image_file in os.listdir(non_glaucoma_folder):\n    image_path = os.path.join(non_glaucoma_folder, image_file)\n    image = cv2.imread(image_path)\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB format\n    resized_image = cv2.resize(image_rgb, (224, 224))\n    non_glaucoma_images.append(resized_image)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:22.703474Z","iopub.execute_input":"2023-06-10T13:14:22.703759Z","iopub.status.idle":"2023-06-10T13:14:46.942071Z","shell.execute_reply.started":"2023-06-10T13:14:22.703735Z","shell.execute_reply":"2023-06-10T13:14:46.941063Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Converting the image data to numpy arrays\n\nglaucoma_images = np.array(glaucoma_images)\nnon_glaucoma_images = np.array(non_glaucoma_images)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:46.943636Z","iopub.execute_input":"2023-06-10T13:14:46.943995Z","iopub.status.idle":"2023-06-10T13:14:47.122370Z","shell.execute_reply.started":"2023-06-10T13:14:46.943959Z","shell.execute_reply":"2023-06-10T13:14:47.121408Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(glaucoma_images.shape)\nprint(non_glaucoma_images.shape)\nprint(glaucoma_images[0].shape)\nprint(non_glaucoma_images[0].shape)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:47.124953Z","iopub.execute_input":"2023-06-10T13:14:47.125458Z","iopub.status.idle":"2023-06-10T13:14:47.131039Z","shell.execute_reply.started":"2023-06-10T13:14:47.125400Z","shell.execute_reply":"2023-06-10T13:14:47.130032Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Creating labels for the images (1 for glaucoma, 0 for non-glaucoma)\n\nglaucoma_labels = np.ones(len(glaucoma_images))\nnon_glaucoma_labels = np.zeros(len(non_glaucoma_images))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:47.132544Z","iopub.execute_input":"2023-06-10T13:14:47.133108Z","iopub.status.idle":"2023-06-10T13:14:47.140980Z","shell.execute_reply.started":"2023-06-10T13:14:47.133077Z","shell.execute_reply":"2023-06-10T13:14:47.139936Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"gen = ImageDataGenerator(rotation_range=10, width_shift_range=0.1, \n    height_shift_range=0.1, shear_range=0.15, zoom_range=0.1, \n    channel_shift_range=10., horizontal_flip=True)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:47.142439Z","iopub.execute_input":"2023-06-10T13:14:47.142811Z","iopub.status.idle":"2023-06-10T13:14:47.150206Z","shell.execute_reply.started":"2023-06-10T13:14:47.142780Z","shell.execute_reply":"2023-06-10T13:14:47.149315Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Augmentation for glaucoma images\naug_images = []\nfor i in range (glaucoma_images.shape[0]):\n    image = glaucoma_images[i]\n    image = np.expand_dims(image,0)\n    aug_iter = gen.flow(image)\n    for j in range(2):\n        augmented_image = next(aug_iter)[0].astype(np.uint8)\n        aug_images.append(augmented_image)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:14:47.152719Z","iopub.execute_input":"2023-06-10T13:14:47.153008Z","iopub.status.idle":"2023-06-10T13:15:11.163815Z","shell.execute_reply.started":"2023-06-10T13:14:47.152986Z","shell.execute_reply":"2023-06-10T13:15:11.162887Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"aug_images = np.array(aug_images)\naug_images.shape\n#plt.imshow(aug_images[0]) #works\naugmented_glaucoma_images = np.concatenate((glaucoma_images, aug_images), axis=0)\naugmented_glaucoma_images = augmented_glaucoma_images[:3000]\naugmented_glaucoma_images.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:11.165275Z","iopub.execute_input":"2023-06-10T13:15:11.165644Z","iopub.status.idle":"2023-06-10T13:15:11.469571Z","shell.execute_reply.started":"2023-06-10T13:15:11.165612Z","shell.execute_reply":"2023-06-10T13:15:11.468511Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Augmentation for non glaucoma images\naug_images = []\nfor i in range (non_glaucoma_images.shape[0]):\n    image = non_glaucoma_images[i]\n    image = np.expand_dims(image,0)\n    aug_iter = gen.flow(image)\n    for j in range(1):\n        augmented_image = next(aug_iter)[0].astype(np.uint8)\n        aug_images.append(augmented_image)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:11.471027Z","iopub.execute_input":"2023-06-10T13:15:11.471530Z","iopub.status.idle":"2023-06-10T13:15:37.508812Z","shell.execute_reply.started":"2023-06-10T13:15:11.471495Z","shell.execute_reply":"2023-06-10T13:15:37.507870Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"aug_images = np.array(aug_images)\naug_images.shape\n#plt.imshow(aug_images[0]) #works\naugmented_non_glaucoma_images = np.concatenate((non_glaucoma_images, aug_images), axis=0)\naugmented_non_glaucoma_images = augmented_non_glaucoma_images[:3000]\naugmented_non_glaucoma_images.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:37.513569Z","iopub.execute_input":"2023-06-10T13:15:37.513885Z","iopub.status.idle":"2023-06-10T13:15:37.957847Z","shell.execute_reply.started":"2023-06-10T13:15:37.513859Z","shell.execute_reply":"2023-06-10T13:15:37.956946Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create the corresponding labels for the augmented data\n\nnum_samples = 3000\naugmented_glaucoma_labels = np.ones((num_samples,))\naugmented_non_glaucoma_labels = np.zeros((num_samples,))\nprint(augmented_glaucoma_labels.shape)\nprint(augmented_non_glaucoma_labels.shape)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:37.962076Z","iopub.execute_input":"2023-06-10T13:15:37.965033Z","iopub.status.idle":"2023-06-10T13:15:37.976237Z","shell.execute_reply.started":"2023-06-10T13:15:37.964995Z","shell.execute_reply":"2023-06-10T13:15:37.975259Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Concatenate the augmented data\n\nX_train = np.concatenate((augmented_glaucoma_images, augmented_non_glaucoma_images), axis=0)\ny_train = np.concatenate((augmented_glaucoma_labels, augmented_non_glaucoma_labels), axis=0)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:37.980050Z","iopub.execute_input":"2023-06-10T13:15:37.981038Z","iopub.status.idle":"2023-06-10T13:15:38.302200Z","shell.execute_reply.started":"2023-06-10T13:15:37.981001Z","shell.execute_reply":"2023-06-10T13:15:38.301260Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:38.303703Z","iopub.execute_input":"2023-06-10T13:15:38.304068Z","iopub.status.idle":"2023-06-10T13:15:38.310663Z","shell.execute_reply.started":"2023-06-10T13:15:38.304036Z","shell.execute_reply":"2023-06-10T13:15:38.309597Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_train.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:38.312167Z","iopub.execute_input":"2023-06-10T13:15:38.312506Z","iopub.status.idle":"2023-06-10T13:15:38.321786Z","shell.execute_reply.started":"2023-06-10T13:15:38.312475Z","shell.execute_reply":"2023-06-10T13:15:38.320637Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Generate random seed for reproducibility\nrandom_seed = 42\nnp.random.seed(random_seed)\n\n# Shuffling the indices\nindices = np.arange(len(X_train))\nnp.random.shuffle(indices)\n\n# Reordering X_train and y_train using the shuffled indices\nX_train_shuffled = X_train[indices]\ny_train_shuffled = y_train[indices]","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:38.323571Z","iopub.execute_input":"2023-06-10T13:15:38.323916Z","iopub.status.idle":"2023-06-10T13:15:38.587597Z","shell.execute_reply.started":"2023-06-10T13:15:38.323877Z","shell.execute_reply":"2023-06-10T13:15:38.586627Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"print(X_train_shuffled.shape)\nprint(y_train_shuffled.shape)\nX_train = X_train_shuffled\ny_train = y_train_shuffled","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:38.589115Z","iopub.execute_input":"2023-06-10T13:15:38.589515Z","iopub.status.idle":"2023-06-10T13:15:38.598237Z","shell.execute_reply.started":"2023-06-10T13:15:38.589481Z","shell.execute_reply":"2023-06-10T13:15:38.597191Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fig=plt.figure(figsize=(10,10))\ncolumns = 4\nrows = 3\nfor i in range(1, columns*rows +1):\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(X_train[i])\n    if y_train[i] == 1:\n        plt.title('glaucoma')\n    else:\n        plt.title('non_control')\n    \nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:38.599879Z","iopub.execute_input":"2023-06-10T13:15:38.600934Z","iopub.status.idle":"2023-06-10T13:15:40.685371Z","shell.execute_reply.started":"2023-06-10T13:15:38.600900Z","shell.execute_reply":"2023-06-10T13:15:40.684105Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from keras import backend as K\n\nIMG_CHANNELS=3\nIMG_WIDTH = 224\nIMG_HEIGHT = 224\n\nif K.image_data_format() == 'channels_first':\n    input_shape = (IMG_CHANNELS, IMG_WIDTH, IMG_HEIGHT)\nelse:\n    input_shape = (IMG_WIDTH, IMG_HEIGHT, IMG_CHANNELS)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:40.687081Z","iopub.execute_input":"2023-06-10T13:15:40.690675Z","iopub.status.idle":"2023-06-10T13:15:40.697190Z","shell.execute_reply.started":"2023-06-10T13:15:40.690640Z","shell.execute_reply":"2023-06-10T13:15:40.696008Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Setting the paths to test dataset folders\n\n#train_folder = '/kaggle/input/acrima-dataset/train'\nglaucoma_folder = os.path.join('/kaggle/input/lag-dataset/LAG/test/glaucoma/image')\nnon_glaucoma_folder = os.path.join('/kaggle/input/lag-dataset/LAG/test/non_glaucoma/image')\n\n\n# Loading the glaucoma images\nglaucoma_images = []\nfor image_file in os.listdir(glaucoma_folder):\n    image_path = os.path.join(glaucoma_folder, image_file)\n    image = cv2.imread(image_path)\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB format\n    resized_image = cv2.resize(image_rgb, (224, 224))\n    glaucoma_images.append(resized_image)\n    \n\n# Load the non-glaucoma images\n\nnon_glaucoma_images = []\nfor image_file in os.listdir(non_glaucoma_folder):\n    image_path = os.path.join(non_glaucoma_folder, image_file)\n    image = cv2.imread(image_path)\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert to RGB format\n    resized_image = cv2.resize(image_rgb, (224, 224))\n    non_glaucoma_images.append(resized_image)\n    \n    \n# Converting the image data to numpy arrays\n\nglaucoma_images = np.array(glaucoma_images)\nnon_glaucoma_images = np.array(non_glaucoma_images)\n\nprint(glaucoma_images.shape)\nprint(non_glaucoma_images.shape)\nprint(glaucoma_images[0].shape)\nprint(non_glaucoma_images[0].shape)\n\n\n# Creating labels for the images (1 for glaucoma, 0 for non-glaucoma)\n\nglaucoma_labels = np.ones(len(glaucoma_images))\nnon_glaucoma_labels = np.zeros(len(non_glaucoma_images))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:40.699396Z","iopub.execute_input":"2023-06-10T13:15:40.700468Z","iopub.status.idle":"2023-06-10T13:15:48.352884Z","shell.execute_reply.started":"2023-06-10T13:15:40.700421Z","shell.execute_reply":"2023-06-10T13:15:48.351932Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_test = np.concatenate((glaucoma_images, non_glaucoma_images), axis=0)\ny_test = np.concatenate((glaucoma_labels, non_glaucoma_labels), axis=0)\nprint(X_test.shape)\nprint(y_test.shape)\nprint(y_test)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:48.354273Z","iopub.execute_input":"2023-06-10T13:15:48.354811Z","iopub.status.idle":"2023-06-10T13:15:48.398702Z","shell.execute_reply.started":"2023-06-10T13:15:48.354777Z","shell.execute_reply":"2023-06-10T13:15:48.397586Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_model(input_shape, with_summary):\n    wd = 0.0001\n    model = Sequential()\n    model.add(Conv2D(64, kernel_size=5, padding=\"same\", input_shape=input_shape, activation = 'relu', kernel_regularizer=regularizers.l2(wd)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(64, kernel_size=3, padding=\"same\", activation = 'relu', kernel_regularizer=regularizers.l2(wd)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(64, kernel_size=3, padding=\"same\", activation = 'relu', kernel_regularizer=regularizers.l2(wd)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(64, kernel_size=3, padding=\"same\", activation = 'relu', kernel_regularizer=regularizers.l2(wd)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    #model.add(Conv2D(32, kernel_size=3, padding=\"same\", activation = 'relu', kernel_regularizer=regularizers.l2(wd)))\n    #model.add(BatchNormalization())\n   #model.add(Dropout(0.1))\n    \n    #model.add(Conv2D(128, kernel_size=3, padding=\"valid\", activation = 'relu',kernel_regularizer=regularizers.l2(wd)))\n    #model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    #model.add(BatchNormalization())\n    #model.add(Dropout(0.1))\n\n    model.add(Flatten())\n    model.add(Dense(units=1000, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n\n    model.add(Dense(units=10, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Dense(units=5, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Dense(1))\n    model.add(Activation(\"sigmoid\"))\n\n\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    \n    if with_summary:\n        model.summary()\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:48.400269Z","iopub.execute_input":"2023-06-10T13:15:48.400677Z","iopub.status.idle":"2023-06-10T13:15:48.414656Z","shell.execute_reply.started":"2023-06-10T13:15:48.400639Z","shell.execute_reply":"2023-06-10T13:15:48.413545Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def lr_schedule(epoch):\n  lrate = 0.001\n  if epoch > 75:\n    lrate = 0.0001\n  if epoch > 100:\n    lrate = 0.001\n  return lrate","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:15:48.416183Z","iopub.execute_input":"2023-06-10T13:15:48.417161Z","iopub.status.idle":"2023-06-10T13:15:48.427548Z","shell.execute_reply.started":"2023-06-10T13:15:48.417127Z","shell.execute_reply":"2023-06-10T13:15:48.426583Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Train the CNN Model\nfrom keras import regularizers\nfrom keras.callbacks import LearningRateScheduler\ninput_shape = (224, 224, 3)\nmodel = create_model(input_shape=input_shape, with_summary=True)\nhistory = model.fit(X_train, y_train,batch_size=64,epochs=100,validation_data=(X_test,y_test), callbacks=[LearningRateScheduler(lr_schedule)],verbose=1)\nprint(model.evaluate(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:22:09.713417Z","iopub.execute_input":"2023-06-10T13:22:09.714281Z","iopub.status.idle":"2023-06-10T13:45:37.774243Z","shell.execute_reply.started":"2023-06-10T13:22:09.714237Z","shell.execute_reply":"2023-06-10T13:45:37.773247Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.models import load_model\nmodel.save('LAG_without_atten_rgb_97.22.h5')","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:46:04.705000Z","iopub.execute_input":"2023-06-10T13:46:04.705391Z","iopub.status.idle":"2023-06-10T13:46:05.158576Z","shell.execute_reply.started":"2023-06-10T13:46:04.705360Z","shell.execute_reply":"2023-06-10T13:46:05.157483Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Saving - json file & .h5\nmodel_json = model.to_json()\nwith open('model.json','w') as json_file:\n  json_file.write(model_json)\nmodel.save_weights('LAG_without_atten_rgb_97.22_weights.h5')","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:46:45.379461Z","iopub.execute_input":"2023-06-10T13:46:45.380111Z","iopub.status.idle":"2023-06-10T13:46:45.529834Z","shell.execute_reply.started":"2023-06-10T13:46:45.380080Z","shell.execute_reply":"2023-06-10T13:46:45.528848Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(history.history.keys())\n#  \"Accuracy\"\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='lower right')\nplt.show()\n# \"Loss\"\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:09.405370Z","iopub.execute_input":"2023-06-10T13:47:09.406273Z","iopub.status.idle":"2023-06-10T13:47:10.113559Z","shell.execute_reply.started":"2023-06-10T13:47:09.406228Z","shell.execute_reply":"2023-06-10T13:47:10.112605Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Detrimine the predictions \nimport numpy as np\npredictions = model.predict(X_test)\npredictions=np.array(predictions)\nprint(predictions.shape)\nprint(predictions)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:10.121886Z","iopub.execute_input":"2023-06-10T13:47:10.122182Z","iopub.status.idle":"2023-06-10T13:47:11.185518Z","shell.execute_reply.started":"2023-06-10T13:47:10.122155Z","shell.execute_reply":"2023-06-10T13:47:11.184461Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history ","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:11.186939Z","iopub.execute_input":"2023-06-10T13:47:11.187776Z","iopub.status.idle":"2023-06-10T13:47:11.195605Z","shell.execute_reply.started":"2023-06-10T13:47:11.187739Z","shell.execute_reply":"2023-06-10T13:47:11.194255Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"history.history","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:11.199211Z","iopub.execute_input":"2023-06-10T13:47:11.200259Z","iopub.status.idle":"2023-06-10T13:47:11.215147Z","shell.execute_reply.started":"2023-06-10T13:47:11.200220Z","shell.execute_reply":"2023-06-10T13:47:11.214215Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Y_prob = model.predict(X_test)\nprint(Y_prob)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:11.217569Z","iopub.execute_input":"2023-06-10T13:47:11.217885Z","iopub.status.idle":"2023-06-10T13:47:12.061016Z","shell.execute_reply.started":"2023-06-10T13:47:11.217861Z","shell.execute_reply":"2023-06-10T13:47:12.059807Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Y_pred = np.round(Y_prob)\nprint(Y_pred)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.062714Z","iopub.execute_input":"2023-06-10T13:47:12.063204Z","iopub.status.idle":"2023-06-10T13:47:12.085039Z","shell.execute_reply.started":"2023-06-10T13:47:12.063071Z","shell.execute_reply":"2023-06-10T13:47:12.084107Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nprint('The accuracy obtained on the test set is:', accuracy_score(Y_pred,y_test))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.086497Z","iopub.execute_input":"2023-06-10T13:47:12.086833Z","iopub.status.idle":"2023-06-10T13:47:12.095623Z","shell.execute_reply.started":"2023-06-10T13:47:12.086799Z","shell.execute_reply":"2023-06-10T13:47:12.094207Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy_score(y_test, Y_pred, )","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.097215Z","iopub.execute_input":"2023-06-10T13:47:12.098413Z","iopub.status.idle":"2023-06-10T13:47:12.107367Z","shell.execute_reply.started":"2023-06-10T13:47:12.098346Z","shell.execute_reply":"2023-06-10T13:47:12.106175Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import seaborn as sns\ndef draw_confusion_matrix(true,preds):\n  conf_matx = confusion_matrix(true, preds)\n  sns.heatmap(conf_matx, annot=True,annot_kws={\"size\": 12},fmt='g', cbar=False, cmap=\"viridis\")\n  plt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.108885Z","iopub.execute_input":"2023-06-10T13:47:12.109749Z","iopub.status.idle":"2023-06-10T13:47:12.116583Z","shell.execute_reply.started":"2023-06-10T13:47:12.109712Z","shell.execute_reply":"2023-06-10T13:47:12.115508Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, Y_pred))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.123703Z","iopub.execute_input":"2023-06-10T13:47:12.124026Z","iopub.status.idle":"2023-06-10T13:47:12.135564Z","shell.execute_reply.started":"2023-06-10T13:47:12.123999Z","shell.execute_reply":"2023-06-10T13:47:12.134477Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import classification_report \ndraw_confusion_matrix(y_test,Y_pred)\nprint('Confusion Matrix')\ntarget_names = ['Advance Glaucoma', 'Normal Control']\nprint(classification_report(y_test, Y_pred, target_names=target_names))","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.137227Z","iopub.execute_input":"2023-06-10T13:47:12.137986Z","iopub.status.idle":"2023-06-10T13:47:12.325083Z","shell.execute_reply.started":"2023-06-10T13:47:12.137952Z","shell.execute_reply":"2023-06-10T13:47:12.324000Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Setup\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_curve, auc\n\n# Get ROC curve FPR and TPR from true labels vs score values\nfpr, tpr, _ = roc_curve(y_test, Y_pred)\n# Calculate ROC Area Under the Curve (AUC) from FPR and TPR data points\nroc_auc = auc(fpr, tpr)\n# Calculate precision and recall from true labels vs score values\nprecision, recall, _ = precision_recall_curve(y_test, Y_pred)\nplt.figure(figsize=(8, 3))\nplt.subplot(1,1,1)\nlw = 2\nplt.plot(fpr, tpr, color='red', lw=lw, label='ROC curve (area = %0.4f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='green', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.grid(True)","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.326745Z","iopub.execute_input":"2023-06-10T13:47:12.327156Z","iopub.status.idle":"2023-06-10T13:47:12.648228Z","shell.execute_reply.started":"2023-06-10T13:47:12.327124Z","shell.execute_reply":"2023-06-10T13:47:12.647309Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fig = plt.figure(figsize=(10, 10))\ncolumns = 3\nrows = 2\nrandom_number = np.random.randint(0, X_test.shape[0] - 26)\n\nfor i in range(1, columns * rows + 1):\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(X_test[i + random_number])\n    gt = ['non_glaucoma', 'glaucoma']\n    prediction_index = int(i + random_number)\n    plt.title('Infection likelihood {:.1%}\\n Ground Truth: {}'.format(float(predictions[prediction_index]), gt[int(y_test[prediction_index])]))\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-10T13:47:12.649487Z","iopub.execute_input":"2023-06-10T13:47:12.650351Z","iopub.status.idle":"2023-06-10T13:47:13.939662Z","shell.execute_reply.started":"2023-06-10T13:47:12.650317Z","shell.execute_reply":"2023-06-10T13:47:13.938674Z"},"trusted":true},"outputs":[],"execution_count":null}]}